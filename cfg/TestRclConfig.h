//created by ParameterGenerator
#ifndef __Test__TUTORIALSCONFIG_H__
#define __Test__TUTORIALSCONFIG_H__

#include<vector>
#include<string>

class ConfigureVec {
public:
  ConfigureVec() {
    ParameterVariantVec = std::vector<rclcpp::parameter::ParameterVariant> ({
      rclcpp::parameter::ParameterVariant("name.frame_rate","frame_rate"),
      rclcpp::parameter::ParameterVariant("des.frame_rate","frame_rate"),
      rclcpp::parameter::ParameterVariant("type.frame_rate","double"),
      rclcpp::parameter::ParameterVariant("lev.frame_rate",0),
      rclcpp::parameter::ParameterVariant("min.frame_rate",5.0),
      rclcpp::parameter::ParameterVariant("max.frame_rate",120.0),
      rclcpp::parameter::ParameterVariant("default.frame_rate",20.0),
      rclcpp::parameter::ParameterVariant("value.frame_rate",20.0),
      rclcpp::parameter::ParameterVariant("edit.frame_rate",""),
      rclcpp::parameter::ParameterVariant("name.enable_image_raw","enable_image_raw"),
      rclcpp::parameter::ParameterVariant("des.enable_image_raw","enalbe_image_raw"),
      rclcpp::parameter::ParameterVariant("type.enable_image_raw","bool"),
      rclcpp::parameter::ParameterVariant("lev.enable_image_raw",0),
      rclcpp::parameter::ParameterVariant("min.enable_image_raw",false),
      rclcpp::parameter::ParameterVariant("max.enable_image_raw",true),
      rclcpp::parameter::ParameterVariant("default.enable_image_raw",false),
      rclcpp::parameter::ParameterVariant("value.enable_image_raw",false),
      rclcpp::parameter::ParameterVariant("edit.enable_image_raw",""),
      rclcpp::parameter::ParameterVariant("name.output_pixfmt","output_pixfmt"),
      rclcpp::parameter::ParameterVariant("des.output_pixfmt","color encoding"),
      rclcpp::parameter::ParameterVariant("type.output_pixfmt","str"),
      rclcpp::parameter::ParameterVariant("lev.output_pixfmt",0),
      rclcpp::parameter::ParameterVariant("min.output_pixfmt",""),
      rclcpp::parameter::ParameterVariant("max.output_pixfmt",""),
      rclcpp::parameter::ParameterVariant("default.output_pixfmt","BGR8"),
      rclcpp::parameter::ParameterVariant("value.output_pixfmt","BGR8"),
      rclcpp::parameter::ParameterVariant("edit.output_pixfmt","{'enum_description': 'An enum to set color encoding mode', 'enum': [{'name': 'out_RGB8', 'description': '', 'srcline': 22, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'RGB8', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'out_BGR8', 'description': '', 'srcline': 23, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'BGR8', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'out_MONO8', 'description': '', 'srcline': 24, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'MONO8', 'cconsttype': 'const char * const', 'ctype': 'std::string'}]}"),
      rclcpp::parameter::ParameterVariant("name.image_rotation","image_rotation"),
      rclcpp::parameter::ParameterVariant("des.image_rotation","set image roation(0, 90, 180,270 degrees clockwise)"),
      rclcpp::parameter::ParameterVariant("type.image_rotation","int"),
      rclcpp::parameter::ParameterVariant("lev.image_rotation",0),
      rclcpp::parameter::ParameterVariant("min.image_rotation",-2147483648),
      rclcpp::parameter::ParameterVariant("max.image_rotation",2147483647),
      rclcpp::parameter::ParameterVariant("default.image_rotation",0),
      rclcpp::parameter::ParameterVariant("value.image_rotation",0),
      rclcpp::parameter::ParameterVariant("edit.image_rotation","{'enum_description': 'An enum to set image rotation degree', 'enum': [{'name': 'degree_0', 'description': '', 'srcline': 31, 'type': 'int', 'srcfile': 'Tutorials.cfg', 'value': 0, 'cconsttype': 'const int', 'ctype': 'int'}, {'name': 'degree_90', 'description': '', 'srcline': 32, 'type': 'int', 'srcfile': 'Tutorials.cfg', 'value': 1, 'cconsttype': 'const int', 'ctype': 'int'}, {'name': 'degree_counter90', 'description': '', 'srcline': 33, 'type': 'int', 'srcfile': 'Tutorials.cfg', 'value': 3, 'cconsttype': 'const int', 'ctype': 'int'}, {'name': 'degree_180', 'description': '', 'srcline': 34, 'type': 'int', 'srcfile': 'Tutorials.cfg', 'value': 2, 'cconsttype': 'const int', 'ctype': 'int'}]}"),
      rclcpp::parameter::ParameterVariant("name.isp_enable","isp_enable"),
      rclcpp::parameter::ParameterVariant("des.isp_enable","Controls whether the image processing core is used for optional pixel format mode (i.e. mono)"),
      rclcpp::parameter::ParameterVariant("type.isp_enable","bool"),
      rclcpp::parameter::ParameterVariant("lev.isp_enable",0),
      rclcpp::parameter::ParameterVariant("min.isp_enable",false),
      rclcpp::parameter::ParameterVariant("max.isp_enable",true),
      rclcpp::parameter::ParameterVariant("default.isp_enable",false),
      rclcpp::parameter::ParameterVariant("value.isp_enable",false),
      rclcpp::parameter::ParameterVariant("edit.isp_enable",""),
      rclcpp::parameter::ParameterVariant("name.compressedformat","compressedformat"),
      rclcpp::parameter::ParameterVariant("des.compressedformat","Compressed Format"),
      rclcpp::parameter::ParameterVariant("type.compressedformat","str"),
      rclcpp::parameter::ParameterVariant("lev.compressedformat",0),
      rclcpp::parameter::ParameterVariant("min.compressedformat",""),
      rclcpp::parameter::ParameterVariant("max.compressedformat",""),
      rclcpp::parameter::ParameterVariant("default.compressedformat","JPEG"),
      rclcpp::parameter::ParameterVariant("value.compressedformat","JPEG"),
      rclcpp::parameter::ParameterVariant("edit.compressedformat","{'enum_description': 'An enum to set compressed fromat', 'enum': [{'name': 'JPEG', 'description': '', 'srcline': 27, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'JPEG', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'PNG', 'description': '', 'srcline': 28, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'PNG', 'cconsttype': 'const char * const', 'ctype': 'std::string'}]}"),
      rclcpp::parameter::ParameterVariant("name.jpeg_quality","jpeg_quality"),
      rclcpp::parameter::ParameterVariant("des.jpeg_quality","JPEG quality(min: 0.3, max:1.0)"),
      rclcpp::parameter::ParameterVariant("type.jpeg_quality","int"),
      rclcpp::parameter::ParameterVariant("lev.jpeg_quality",0),
      rclcpp::parameter::ParameterVariant("min.jpeg_quality",1),
      rclcpp::parameter::ParameterVariant("max.jpeg_quality",100),
      rclcpp::parameter::ParameterVariant("default.jpeg_quality",75),
      rclcpp::parameter::ParameterVariant("value.jpeg_quality",75),
      rclcpp::parameter::ParameterVariant("edit.jpeg_quality",""),
      rclcpp::parameter::ParameterVariant("name.png_level","png_level"),
      rclcpp::parameter::ParameterVariant("des.png_level","PNG compressed level (min 1, max: 9)"),
      rclcpp::parameter::ParameterVariant("type.png_level","int"),
      rclcpp::parameter::ParameterVariant("lev.png_level",0),
      rclcpp::parameter::ParameterVariant("min.png_level",1),
      rclcpp::parameter::ParameterVariant("max.png_level",9),
      rclcpp::parameter::ParameterVariant("default.png_level",6),
      rclcpp::parameter::ParameterVariant("value.png_level",6),
      rclcpp::parameter::ParameterVariant("edit.png_level",""),
      rclcpp::parameter::ParameterVariant("name.enable_trigger","enable_trigger"),
      rclcpp::parameter::ParameterVariant("des.enable_trigger","enalbe_trigger"),
      rclcpp::parameter::ParameterVariant("type.enable_trigger","bool"),
      rclcpp::parameter::ParameterVariant("lev.enable_trigger",0),
      rclcpp::parameter::ParameterVariant("min.enable_trigger",false),
      rclcpp::parameter::ParameterVariant("max.enable_trigger",true),
      rclcpp::parameter::ParameterVariant("default.enable_trigger",false),
      rclcpp::parameter::ParameterVariant("value.enable_trigger",false),
      rclcpp::parameter::ParameterVariant("edit.enable_trigger",""),
      rclcpp::parameter::ParameterVariant("name.enable_trigger_delay","enable_trigger_delay"),
      rclcpp::parameter::ParameterVariant("des.enable_trigger_delay","enalbe_trigger"),
      rclcpp::parameter::ParameterVariant("type.enable_trigger_delay","bool"),
      rclcpp::parameter::ParameterVariant("lev.enable_trigger_delay",0),
      rclcpp::parameter::ParameterVariant("min.enable_trigger_delay",false),
      rclcpp::parameter::ParameterVariant("max.enable_trigger_delay",true),
      rclcpp::parameter::ParameterVariant("default.enable_trigger_delay",false),
      rclcpp::parameter::ParameterVariant("value.enable_trigger_delay",false),
      rclcpp::parameter::ParameterVariant("edit.enable_trigger_delay",""),
      rclcpp::parameter::ParameterVariant("name.trigger_delay","trigger_delay"),
      rclcpp::parameter::ParameterVariant("des.trigger_delay","trigger_delay in microseconds(us) "),
      rclcpp::parameter::ParameterVariant("type.trigger_delay","double"),
      rclcpp::parameter::ParameterVariant("lev.trigger_delay",0),
      rclcpp::parameter::ParameterVariant("min.trigger_delay",1.0),
      rclcpp::parameter::ParameterVariant("max.trigger_delay",30000.0),
      rclcpp::parameter::ParameterVariant("default.trigger_delay",0.0),
      rclcpp::parameter::ParameterVariant("value.trigger_delay",0.0),
      rclcpp::parameter::ParameterVariant("edit.trigger_delay",""),
      rclcpp::parameter::ParameterVariant("name.trigger_source","trigger_source"),
      rclcpp::parameter::ParameterVariant("des.trigger_source","trigger source"),
      rclcpp::parameter::ParameterVariant("type.trigger_source","str"),
      rclcpp::parameter::ParameterVariant("lev.trigger_source",0),
      rclcpp::parameter::ParameterVariant("min.trigger_source",""),
      rclcpp::parameter::ParameterVariant("max.trigger_source",""),
      rclcpp::parameter::ParameterVariant("default.trigger_source","Software"),
      rclcpp::parameter::ParameterVariant("value.trigger_source","Software"),
      rclcpp::parameter::ParameterVariant("edit.trigger_source","{'enum_description': 'An enum to set source', 'enum': [{'name': 'Software', 'description': '', 'srcline': 50, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Software', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'Line0', 'description': '', 'srcline': 51, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Line0', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'Line1', 'description': '', 'srcline': 52, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Line1', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'Line2', 'description': '', 'srcline': 53, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Line1', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'LIne3', 'description': '', 'srcline': 54, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Line3', 'cconsttype': 'const char * const', 'ctype': 'std::string'}]}"),
      rclcpp::parameter::ParameterVariant("name.trigger_selector","trigger_selector"),
      rclcpp::parameter::ParameterVariant("des.trigger_selector","trigger source"),
      rclcpp::parameter::ParameterVariant("type.trigger_selector","str"),
      rclcpp::parameter::ParameterVariant("lev.trigger_selector",0),
      rclcpp::parameter::ParameterVariant("min.trigger_selector",""),
      rclcpp::parameter::ParameterVariant("max.trigger_selector",""),
      rclcpp::parameter::ParameterVariant("default.trigger_selector","FrameStart"),
      rclcpp::parameter::ParameterVariant("value.trigger_selector","FrameStart"),
      rclcpp::parameter::ParameterVariant("edit.trigger_selector","{'enum_description': 'An enum to set tirgger behavior', 'enum': [{'name': 'AcquisitionStart', 'description': '', 'srcline': 57, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'AcquisitionStart', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'AcquisitionEnd', 'description': '', 'srcline': 58, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'AcquisitionEnd', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'AcquisitionActive', 'description': '', 'srcline': 59, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'AcquisitionActive', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'FrameStart', 'description': '', 'srcline': 60, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'FrameStart', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'FrameEnd', 'description': '', 'srcline': 61, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'FrameEnd', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'FrameActive', 'description': '', 'srcline': 62, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'FrameActive', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'FrameBurstStart', 'description': '', 'srcline': 63, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'FrameBurstStart', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'FrameBurstEnd', 'description': '', 'srcline': 64, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'FrameBurstEnd', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'FrameBurstActive', 'description': '', 'srcline': 65, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'FrameBurstActive', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'LineStart', 'description': '', 'srcline': 66, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'LineStart', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'ExposureStart', 'description': '', 'srcline': 67, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'ExposureStart', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'ExposureEnd', 'description': '', 'srcline': 68, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'ExposureEnd', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'ExposureActive', 'description': '', 'srcline': 69, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'ExposureActive', 'cconsttype': 'const char * const', 'ctype': 'std::string'}]}"),
      rclcpp::parameter::ParameterVariant("name.trigger_activation","trigger_activation"),
      rclcpp::parameter::ParameterVariant("des.trigger_activation","trigger source"),
      rclcpp::parameter::ParameterVariant("type.trigger_activation","str"),
      rclcpp::parameter::ParameterVariant("lev.trigger_activation",0),
      rclcpp::parameter::ParameterVariant("min.trigger_activation",""),
      rclcpp::parameter::ParameterVariant("max.trigger_activation",""),
      rclcpp::parameter::ParameterVariant("default.trigger_activation","RisingEdge"),
      rclcpp::parameter::ParameterVariant("value.trigger_activation","RisingEdge"),
      rclcpp::parameter::ParameterVariant("edit.trigger_activation","{'enum_description': 'An enum to set tirgger activation method', 'enum': [{'name': 'RisingEdge', 'description': '', 'srcline': 72, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'RisingEdge', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'FallingEdge', 'description': '', 'srcline': 73, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'FallingEdge', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'AnyEdge', 'description': '', 'srcline': 74, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'AnyEdge', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'LevelHigh', 'description': '', 'srcline': 75, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'LevelHigh', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'LevelLow', 'description': '', 'srcline': 76, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'LevelLow', 'cconsttype': 'const char * const', 'ctype': 'std::string'}]}"),
      rclcpp::parameter::ParameterVariant("name.trigger_overlap","trigger_overlap"),
      rclcpp::parameter::ParameterVariant("des.trigger_overlap","trigger source"),
      rclcpp::parameter::ParameterVariant("type.trigger_overlap","str"),
      rclcpp::parameter::ParameterVariant("lev.trigger_overlap",0),
      rclcpp::parameter::ParameterVariant("min.trigger_overlap",""),
      rclcpp::parameter::ParameterVariant("max.trigger_overlap",""),
      rclcpp::parameter::ParameterVariant("default.trigger_overlap","ReadOut"),
      rclcpp::parameter::ParameterVariant("value.trigger_overlap","ReadOut"),
      rclcpp::parameter::ParameterVariant("edit.trigger_overlap","{'enum_description': 'An enum to set tirgger overlap method', 'enum': [{'name': 'Off', 'description': '', 'srcline': 80, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Off', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'ReadOut', 'description': '', 'srcline': 81, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'ReadOut', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'PreviousFrame', 'description': '', 'srcline': 82, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'PreviousFrame', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'PreviousLine', 'description': '', 'srcline': 83, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'PreviousLine', 'cconsttype': 'const char * const', 'ctype': 'std::string'}]}"),
      rclcpp::parameter::ParameterVariant("name.auto_white_balance","auto_white_balance"),
      rclcpp::parameter::ParameterVariant("des.auto_white_balance"," "),
      rclcpp::parameter::ParameterVariant("type.auto_white_balance","bool"),
      rclcpp::parameter::ParameterVariant("lev.auto_white_balance",0),
      rclcpp::parameter::ParameterVariant("min.auto_white_balance",false),
      rclcpp::parameter::ParameterVariant("max.auto_white_balance",true),
      rclcpp::parameter::ParameterVariant("default.auto_white_balance",true),
      rclcpp::parameter::ParameterVariant("value.auto_white_balance",true),
      rclcpp::parameter::ParameterVariant("edit.auto_white_balance",""),
      rclcpp::parameter::ParameterVariant("name.white_balance_blue","white_balance_blue"),
      rclcpp::parameter::ParameterVariant("des.white_balance_blue","White balance in blue.(blue-green ratio , max:4.0)"),
      rclcpp::parameter::ParameterVariant("type.white_balance_blue","double"),
      rclcpp::parameter::ParameterVariant("lev.white_balance_blue",0),
      rclcpp::parameter::ParameterVariant("min.white_balance_blue",0.25),
      rclcpp::parameter::ParameterVariant("max.white_balance_blue",4.0),
      rclcpp::parameter::ParameterVariant("default.white_balance_blue",0.5),
      rclcpp::parameter::ParameterVariant("value.white_balance_blue",0.5),
      rclcpp::parameter::ParameterVariant("edit.white_balance_blue",""),
      rclcpp::parameter::ParameterVariant("name.white_balance_red","white_balance_red"),
      rclcpp::parameter::ParameterVariant("des.white_balance_red","White balance in red.(red-green ratio, max 4.0)"),
      rclcpp::parameter::ParameterVariant("type.white_balance_red","double"),
      rclcpp::parameter::ParameterVariant("lev.white_balance_red",0),
      rclcpp::parameter::ParameterVariant("min.white_balance_red",0.25),
      rclcpp::parameter::ParameterVariant("max.white_balance_red",4.0),
      rclcpp::parameter::ParameterVariant("default.white_balance_red",0.5),
      rclcpp::parameter::ParameterVariant("value.white_balance_red",0.5),
      rclcpp::parameter::ParameterVariant("edit.white_balance_red",""),
      rclcpp::parameter::ParameterVariant("name.awb_damping","awb_damping"),
      rclcpp::parameter::ParameterVariant("des.awb_damping","AutoWhiteBalance_damping"),
      rclcpp::parameter::ParameterVariant("type.awb_damping","double"),
      rclcpp::parameter::ParameterVariant("lev.awb_damping",0),
      rclcpp::parameter::ParameterVariant("min.awb_damping",0.0),
      rclcpp::parameter::ParameterVariant("max.awb_damping",0.99),
      rclcpp::parameter::ParameterVariant("default.awb_damping",0.25),
      rclcpp::parameter::ParameterVariant("value.awb_damping",0.25),
      rclcpp::parameter::ParameterVariant("edit.awb_damping",""),
      rclcpp::parameter::ParameterVariant("name.awb_lower_limit","awb_lower_limit"),
      rclcpp::parameter::ParameterVariant("des.awb_lower_limit","AutoWhiteBalance_upper_limit"),
      rclcpp::parameter::ParameterVariant("type.awb_lower_limit","double"),
      rclcpp::parameter::ParameterVariant("lev.awb_lower_limit",0),
      rclcpp::parameter::ParameterVariant("min.awb_lower_limit",0.25),
      rclcpp::parameter::ParameterVariant("max.awb_lower_limit",4.0),
      rclcpp::parameter::ParameterVariant("default.awb_lower_limit",0.25),
      rclcpp::parameter::ParameterVariant("value.awb_lower_limit",0.25),
      rclcpp::parameter::ParameterVariant("edit.awb_lower_limit",""),
      rclcpp::parameter::ParameterVariant("name.awb_upper_limit","awb_upper_limit"),
      rclcpp::parameter::ParameterVariant("des.awb_upper_limit","AutoWhiteBalance_lower_limit"),
      rclcpp::parameter::ParameterVariant("type.awb_upper_limit","double"),
      rclcpp::parameter::ParameterVariant("lev.awb_upper_limit",0),
      rclcpp::parameter::ParameterVariant("min.awb_upper_limit",0.26),
      rclcpp::parameter::ParameterVariant("max.awb_upper_limit",4.0),
      rclcpp::parameter::ParameterVariant("default.awb_upper_limit",4.0),
      rclcpp::parameter::ParameterVariant("value.awb_upper_limit",4.0),
      rclcpp::parameter::ParameterVariant("edit.awb_upper_limit",""),
      rclcpp::parameter::ParameterVariant("name.awb_lightprofile","awb_lightprofile"),
      rclcpp::parameter::ParameterVariant("des.awb_lightprofile","light profile"),
      rclcpp::parameter::ParameterVariant("type.awb_lightprofile","str"),
      rclcpp::parameter::ParameterVariant("lev.awb_lightprofile",0),
      rclcpp::parameter::ParameterVariant("min.awb_lightprofile",""),
      rclcpp::parameter::ParameterVariant("max.awb_lightprofile",""),
      rclcpp::parameter::ParameterVariant("default.awb_lightprofile","Indoor"),
      rclcpp::parameter::ParameterVariant("value.awb_lightprofile","Indoor"),
      rclcpp::parameter::ParameterVariant("edit.awb_lightprofile","{'enum_description': 'An enum to set light profile', 'enum': [{'name': 'Indoor', 'description': '', 'srcline': 97, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Indoor', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'Outdoor', 'description': '', 'srcline': 98, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Outdoor', 'cconsttype': 'const char * const', 'ctype': 'std::string'}]}"),
      rclcpp::parameter::ParameterVariant("name.auto_gain","auto_gain"),
      rclcpp::parameter::ParameterVariant("des.auto_gain","set auto gain"),
      rclcpp::parameter::ParameterVariant("type.auto_gain","bool"),
      rclcpp::parameter::ParameterVariant("lev.auto_gain",0),
      rclcpp::parameter::ParameterVariant("min.auto_gain",false),
      rclcpp::parameter::ParameterVariant("max.auto_gain",true),
      rclcpp::parameter::ParameterVariant("default.auto_gain",true),
      rclcpp::parameter::ParameterVariant("value.auto_gain",true),
      rclcpp::parameter::ParameterVariant("edit.auto_gain",""),
      rclcpp::parameter::ParameterVariant("name.auto_exposure","auto_exposure"),
      rclcpp::parameter::ParameterVariant("des.auto_exposure","set auto exposure"),
      rclcpp::parameter::ParameterVariant("type.auto_exposure","bool"),
      rclcpp::parameter::ParameterVariant("lev.auto_exposure",0),
      rclcpp::parameter::ParameterVariant("min.auto_exposure",false),
      rclcpp::parameter::ParameterVariant("max.auto_exposure",true),
      rclcpp::parameter::ParameterVariant("default.auto_exposure",true),
      rclcpp::parameter::ParameterVariant("value.auto_exposure",true),
      rclcpp::parameter::ParameterVariant("edit.auto_exposure",""),
      rclcpp::parameter::ParameterVariant("name.gain","gain"),
      rclcpp::parameter::ParameterVariant("des.gain","Gain (in dB) applied to the images in the sequence."),
      rclcpp::parameter::ParameterVariant("type.gain","double"),
      rclcpp::parameter::ParameterVariant("lev.gain",0),
      rclcpp::parameter::ParameterVariant("min.gain",0.0),
      rclcpp::parameter::ParameterVariant("max.gain",40.0),
      rclcpp::parameter::ParameterVariant("default.gain",35.0),
      rclcpp::parameter::ParameterVariant("value.gain",35.0),
      rclcpp::parameter::ParameterVariant("edit.gain",""),
      rclcpp::parameter::ParameterVariant("name.exposure_time","exposure_time"),
      rclcpp::parameter::ParameterVariant("des.exposure_time","Time duration in microsecond(us), the shutter was open."),
      rclcpp::parameter::ParameterVariant("type.exposure_time","double"),
      rclcpp::parameter::ParameterVariant("lev.exposure_time",0),
      rclcpp::parameter::ParameterVariant("min.exposure_time",6.0),
      rclcpp::parameter::ParameterVariant("max.exposure_time",25000.0),
      rclcpp::parameter::ParameterVariant("default.exposure_time",15.0),
      rclcpp::parameter::ParameterVariant("value.exposure_time",15.0),
      rclcpp::parameter::ParameterVariant("edit.exposure_time",""),
      rclcpp::parameter::ParameterVariant("name.ae_lightmode","ae_lightmode"),
      rclcpp::parameter::ParameterVariant("des.ae_lightmode","Auto exposure light mode "),
      rclcpp::parameter::ParameterVariant("type.ae_lightmode","str"),
      rclcpp::parameter::ParameterVariant("lev.ae_lightmode",0),
      rclcpp::parameter::ParameterVariant("min.ae_lightmode",""),
      rclcpp::parameter::ParameterVariant("max.ae_lightmode",""),
      rclcpp::parameter::ParameterVariant("default.ae_lightmode","Normal"),
      rclcpp::parameter::ParameterVariant("value.ae_lightmode","Normal"),
      rclcpp::parameter::ParameterVariant("edit.ae_lightmode","{'enum_description': 'An enum to set auto exposure lighting mode setting', 'enum': [{'name': 'Normal', 'description': '', 'srcline': 101, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Normal', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'Backlight', 'description': '', 'srcline': 102, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Backlight', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'Frontlight', 'description': '', 'srcline': 103, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Frontlight', 'cconsttype': 'const char * const', 'ctype': 'std::string'}]}"),
      rclcpp::parameter::ParameterVariant("name.ae_priority","ae_priority"),
      rclcpp::parameter::ParameterVariant("des.ae_priority","Auto exposure control priority "),
      rclcpp::parameter::ParameterVariant("type.ae_priority","str"),
      rclcpp::parameter::ParameterVariant("lev.ae_priority",0),
      rclcpp::parameter::ParameterVariant("min.ae_priority",""),
      rclcpp::parameter::ParameterVariant("max.ae_priority",""),
      rclcpp::parameter::ParameterVariant("default.ae_priority","ExposureTime"),
      rclcpp::parameter::ParameterVariant("value.ae_priority","ExposureTime"),
      rclcpp::parameter::ParameterVariant("edit.ae_priority","{'enum_description': 'An enum to set auto exposure control priority setting', 'enum': [{'name': 'Gain', 'description': '', 'srcline': 118, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'Gain', 'cconsttype': 'const char * const', 'ctype': 'std::string'}, {'name': 'ExposureTime', 'description': '', 'srcline': 119, 'type': 'str', 'srcfile': 'Tutorials.cfg', 'value': 'ExposureTime', 'cconsttype': 'const char * const', 'ctype': 'std::string'}]}"),
      rclcpp::parameter::ParameterVariant("name.ae_time_lower_limit","ae_time_lower_limit"),
      rclcpp::parameter::ParameterVariant("des.ae_time_lower_limit","The smallest exposure time in microsecond(us) that auto exposure can set"),
      rclcpp::parameter::ParameterVariant("type.ae_time_lower_limit","double"),
      rclcpp::parameter::ParameterVariant("lev.ae_time_lower_limit",0),
      rclcpp::parameter::ParameterVariant("min.ae_time_lower_limit",6.0),
      rclcpp::parameter::ParameterVariant("max.ae_time_lower_limit",25000.0),
      rclcpp::parameter::ParameterVariant("default.ae_time_lower_limit",6.0),
      rclcpp::parameter::ParameterVariant("value.ae_time_lower_limit",6.0),
      rclcpp::parameter::ParameterVariant("edit.ae_time_lower_limit",""),
      rclcpp::parameter::ParameterVariant("name.ae_time_upper_limit","ae_time_upper_limit"),
      rclcpp::parameter::ParameterVariant("des.ae_time_upper_limit","The largest exposure time in microsecond(us) that auto exposure can set"),
      rclcpp::parameter::ParameterVariant("type.ae_time_upper_limit","double"),
      rclcpp::parameter::ParameterVariant("lev.ae_time_upper_limit",0),
      rclcpp::parameter::ParameterVariant("min.ae_time_upper_limit",6.0),
      rclcpp::parameter::ParameterVariant("max.ae_time_upper_limit",25000.0),
      rclcpp::parameter::ParameterVariant("default.ae_time_upper_limit",10000.0),
      rclcpp::parameter::ParameterVariant("value.ae_time_upper_limit",10000.0),
      rclcpp::parameter::ParameterVariant("edit.ae_time_upper_limit",""),
      rclcpp::parameter::ParameterVariant("name.ae_gain_lower_limit","ae_gain_lower_limit"),
      rclcpp::parameter::ParameterVariant("des.ae_gain_lower_limit","The smallest gain that auto exposure can set"),
      rclcpp::parameter::ParameterVariant("type.ae_gain_lower_limit","double"),
      rclcpp::parameter::ParameterVariant("lev.ae_gain_lower_limit",0),
      rclcpp::parameter::ParameterVariant("min.ae_gain_lower_limit",0.0),
      rclcpp::parameter::ParameterVariant("max.ae_gain_lower_limit",42.0),
      rclcpp::parameter::ParameterVariant("default.ae_gain_lower_limit",0.0),
      rclcpp::parameter::ParameterVariant("value.ae_gain_lower_limit",0.0),
      rclcpp::parameter::ParameterVariant("edit.ae_gain_lower_limit",""),
      rclcpp::parameter::ParameterVariant("name.ae_gain_upper_limit","ae_gain_upper_limit"),
      rclcpp::parameter::ParameterVariant("des.ae_gain_upper_limit","The largest gain that auto exposure can set"),
      rclcpp::parameter::ParameterVariant("type.ae_gain_upper_limit","double"),
      rclcpp::parameter::ParameterVariant("lev.ae_gain_upper_limit",0),
      rclcpp::parameter::ParameterVariant("min.ae_gain_upper_limit",0.0),
      rclcpp::parameter::ParameterVariant("max.ae_gain_upper_limit",42.0),
      rclcpp::parameter::ParameterVariant("default.ae_gain_upper_limit",32.0),
      rclcpp::parameter::ParameterVariant("value.ae_gain_upper_limit",32.0),
      rclcpp::parameter::ParameterVariant("edit.ae_gain_upper_limit",""),
      rclcpp::parameter::ParameterVariant("name.auto_grey_value_enable","auto_grey_value_enable"),
      rclcpp::parameter::ParameterVariant("des.auto_grey_value_enable","enable auto grey value adjustment"),
      rclcpp::parameter::ParameterVariant("type.auto_grey_value_enable","bool"),
      rclcpp::parameter::ParameterVariant("lev.auto_grey_value_enable",0),
      rclcpp::parameter::ParameterVariant("min.auto_grey_value_enable",false),
      rclcpp::parameter::ParameterVariant("max.auto_grey_value_enable",true),
      rclcpp::parameter::ParameterVariant("default.auto_grey_value_enable",true),
      rclcpp::parameter::ParameterVariant("value.auto_grey_value_enable",true),
      rclcpp::parameter::ParameterVariant("edit.auto_grey_value_enable",""),
      rclcpp::parameter::ParameterVariant("name.grey_value_fixed","grey_value_fixed"),
      rclcpp::parameter::ParameterVariant("des.grey_value_fixed","The fixed target gray value"),
      rclcpp::parameter::ParameterVariant("type.grey_value_fixed","double"),
      rclcpp::parameter::ParameterVariant("lev.grey_value_fixed",0),
      rclcpp::parameter::ParameterVariant("min.grey_value_fixed",5.0),
      rclcpp::parameter::ParameterVariant("max.grey_value_fixed",95.0),
      rclcpp::parameter::ParameterVariant("default.grey_value_fixed",40.0),
      rclcpp::parameter::ParameterVariant("value.grey_value_fixed",40.0),
      rclcpp::parameter::ParameterVariant("edit.grey_value_fixed",""),
      rclcpp::parameter::ParameterVariant("name.auto_grey_value_lower_limit","auto_grey_value_lower_limit"),
      rclcpp::parameter::ParameterVariant("des.auto_grey_value_lower_limit","The smallest grayval that auto exposure can set"),
      rclcpp::parameter::ParameterVariant("type.auto_grey_value_lower_limit","double"),
      rclcpp::parameter::ParameterVariant("lev.auto_grey_value_lower_limit",0),
      rclcpp::parameter::ParameterVariant("min.auto_grey_value_lower_limit",5.0),
      rclcpp::parameter::ParameterVariant("max.auto_grey_value_lower_limit",95.0),
      rclcpp::parameter::ParameterVariant("default.auto_grey_value_lower_limit",10.0),
      rclcpp::parameter::ParameterVariant("value.auto_grey_value_lower_limit",10.0),
      rclcpp::parameter::ParameterVariant("edit.auto_grey_value_lower_limit",""),
      rclcpp::parameter::ParameterVariant("name.auto_grey_value_upper_limit","auto_grey_value_upper_limit"),
      rclcpp::parameter::ParameterVariant("des.auto_grey_value_upper_limit","The largest grayval that auto exposure can set"),
      rclcpp::parameter::ParameterVariant("type.auto_grey_value_upper_limit","double"),
      rclcpp::parameter::ParameterVariant("lev.auto_grey_value_upper_limit",0),
      rclcpp::parameter::ParameterVariant("min.auto_grey_value_upper_limit",5.0),
      rclcpp::parameter::ParameterVariant("max.auto_grey_value_upper_limit",95.0),
      rclcpp::parameter::ParameterVariant("default.auto_grey_value_upper_limit",50.0),
      rclcpp::parameter::ParameterVariant("value.auto_grey_value_upper_limit",50.0),
      rclcpp::parameter::ParameterVariant("edit.auto_grey_value_upper_limit",""),
      rclcpp::parameter::ParameterVariant("name.gamma_enable","gamma_enable"),
      rclcpp::parameter::ParameterVariant("des.gamma_enable","Enables/disables gamma correction"),
      rclcpp::parameter::ParameterVariant("type.gamma_enable","bool"),
      rclcpp::parameter::ParameterVariant("lev.gamma_enable",0),
      rclcpp::parameter::ParameterVariant("min.gamma_enable",false),
      rclcpp::parameter::ParameterVariant("max.gamma_enable",true),
      rclcpp::parameter::ParameterVariant("default.gamma_enable",false),
      rclcpp::parameter::ParameterVariant("value.gamma_enable",false),
      rclcpp::parameter::ParameterVariant("edit.gamma_enable",""),
      rclcpp::parameter::ParameterVariant("name.aas_roi_enable","aas_roi_enable"),
      rclcpp::parameter::ParameterVariant("des.aas_roi_enable","Enable auto algorithm roi"),
      rclcpp::parameter::ParameterVariant("type.aas_roi_enable","bool"),
      rclcpp::parameter::ParameterVariant("lev.aas_roi_enable",0),
      rclcpp::parameter::ParameterVariant("min.aas_roi_enable",false),
      rclcpp::parameter::ParameterVariant("max.aas_roi_enable",true),
      rclcpp::parameter::ParameterVariant("default.aas_roi_enable",false),
      rclcpp::parameter::ParameterVariant("value.aas_roi_enable",false),
      rclcpp::parameter::ParameterVariant("edit.aas_roi_enable",""),
      rclcpp::parameter::ParameterVariant("name.show_autoalgorithm_range","show_autoalgorithm_range"),
      rclcpp::parameter::ParameterVariant("des.show_autoalgorithm_range","visulization the range of the auto algorithm(red:whitebalance, blue: exposure)"),
      rclcpp::parameter::ParameterVariant("type.show_autoalgorithm_range","bool"),
      rclcpp::parameter::ParameterVariant("lev.show_autoalgorithm_range",0),
      rclcpp::parameter::ParameterVariant("min.show_autoalgorithm_range",false),
      rclcpp::parameter::ParameterVariant("max.show_autoalgorithm_range",true),
      rclcpp::parameter::ParameterVariant("default.show_autoalgorithm_range",false),
      rclcpp::parameter::ParameterVariant("value.show_autoalgorithm_range",false),
      rclcpp::parameter::ParameterVariant("edit.show_autoalgorithm_range",""),
      rclcpp::parameter::ParameterVariant("name.awb_offsetx","awb_offsetx"),
      rclcpp::parameter::ParameterVariant("des.awb_offsetx","AutoWhiteBalance_roi_offsetx"),
      rclcpp::parameter::ParameterVariant("type.awb_offsetx","int"),
      rclcpp::parameter::ParameterVariant("lev.awb_offsetx",0),
      rclcpp::parameter::ParameterVariant("min.awb_offsetx",0),
      rclcpp::parameter::ParameterVariant("max.awb_offsetx",1024),
      rclcpp::parameter::ParameterVariant("default.awb_offsetx",100),
      rclcpp::parameter::ParameterVariant("value.awb_offsetx",100),
      rclcpp::parameter::ParameterVariant("edit.awb_offsetx",""),
      rclcpp::parameter::ParameterVariant("name.awb_offsety","awb_offsety"),
      rclcpp::parameter::ParameterVariant("des.awb_offsety","AutoWhiteBalance_roi_offsety"),
      rclcpp::parameter::ParameterVariant("type.awb_offsety","int"),
      rclcpp::parameter::ParameterVariant("lev.awb_offsety",0),
      rclcpp::parameter::ParameterVariant("min.awb_offsety",0),
      rclcpp::parameter::ParameterVariant("max.awb_offsety",576),
      rclcpp::parameter::ParameterVariant("default.awb_offsety",200),
      rclcpp::parameter::ParameterVariant("value.awb_offsety",200),
      rclcpp::parameter::ParameterVariant("edit.awb_offsety",""),
      rclcpp::parameter::ParameterVariant("name.awb_width","awb_width"),
      rclcpp::parameter::ParameterVariant("des.awb_width","AutoWhiteBalance_roi_offsetx"),
      rclcpp::parameter::ParameterVariant("type.awb_width","int"),
      rclcpp::parameter::ParameterVariant("lev.awb_width",0),
      rclcpp::parameter::ParameterVariant("min.awb_width",0),
      rclcpp::parameter::ParameterVariant("max.awb_width",1024),
      rclcpp::parameter::ParameterVariant("default.awb_width",824),
      rclcpp::parameter::ParameterVariant("value.awb_width",824),
      rclcpp::parameter::ParameterVariant("edit.awb_width",""),
      rclcpp::parameter::ParameterVariant("name.awb_height","awb_height"),
      rclcpp::parameter::ParameterVariant("des.awb_height","AutoWhiteBalance_roi_offsety"),
      rclcpp::parameter::ParameterVariant("type.awb_height","int"),
      rclcpp::parameter::ParameterVariant("lev.awb_height",0),
      rclcpp::parameter::ParameterVariant("min.awb_height",0),
      rclcpp::parameter::ParameterVariant("max.awb_height",576),
      rclcpp::parameter::ParameterVariant("default.awb_height",330),
      rclcpp::parameter::ParameterVariant("value.awb_height",330),
      rclcpp::parameter::ParameterVariant("edit.awb_height",""),
      rclcpp::parameter::ParameterVariant("name.ae_offsetx","ae_offsetx"),
      rclcpp::parameter::ParameterVariant("des.ae_offsetx","AutoExposure_roi_offsetx"),
      rclcpp::parameter::ParameterVariant("type.ae_offsetx","int"),
      rclcpp::parameter::ParameterVariant("lev.ae_offsetx",0),
      rclcpp::parameter::ParameterVariant("min.ae_offsetx",0),
      rclcpp::parameter::ParameterVariant("max.ae_offsetx",1024),
      rclcpp::parameter::ParameterVariant("default.ae_offsetx",100),
      rclcpp::parameter::ParameterVariant("value.ae_offsetx",100),
      rclcpp::parameter::ParameterVariant("edit.ae_offsetx",""),
      rclcpp::parameter::ParameterVariant("name.ae_offsety","ae_offsety"),
      rclcpp::parameter::ParameterVariant("des.ae_offsety","AutoExposure_roi_offsety"),
      rclcpp::parameter::ParameterVariant("type.ae_offsety","int"),
      rclcpp::parameter::ParameterVariant("lev.ae_offsety",0),
      rclcpp::parameter::ParameterVariant("min.ae_offsety",0),
      rclcpp::parameter::ParameterVariant("max.ae_offsety",576),
      rclcpp::parameter::ParameterVariant("default.ae_offsety",200),
      rclcpp::parameter::ParameterVariant("value.ae_offsety",200),
      rclcpp::parameter::ParameterVariant("edit.ae_offsety",""),
      rclcpp::parameter::ParameterVariant("name.ae_width","ae_width"),
      rclcpp::parameter::ParameterVariant("des.ae_width","AutoExposure_roi_offsetx"),
      rclcpp::parameter::ParameterVariant("type.ae_width","int"),
      rclcpp::parameter::ParameterVariant("lev.ae_width",0),
      rclcpp::parameter::ParameterVariant("min.ae_width",0),
      rclcpp::parameter::ParameterVariant("max.ae_width",1024),
      rclcpp::parameter::ParameterVariant("default.ae_width",824),
      rclcpp::parameter::ParameterVariant("value.ae_width",824),
      rclcpp::parameter::ParameterVariant("edit.ae_width",""),
      rclcpp::parameter::ParameterVariant("name.ae_height","ae_height"),
      rclcpp::parameter::ParameterVariant("des.ae_height","AutoExposure_roi_offsety"),
      rclcpp::parameter::ParameterVariant("type.ae_height","int"),
      rclcpp::parameter::ParameterVariant("lev.ae_height",0),
      rclcpp::parameter::ParameterVariant("min.ae_height",0),
      rclcpp::parameter::ParameterVariant("max.ae_height",576),
      rclcpp::parameter::ParameterVariant("default.ae_height",330),
      rclcpp::parameter::ParameterVariant("value.ae_height",330),
      rclcpp::parameter::ParameterVariant("edit.ae_height",""),
    });
  }
  std::vector<rclcpp::parameter::ParameterVariant> getParameterVariantVec() {
    return ParameterVariantVec;
  }
private:
std::vector<rclcpp::parameter::ParameterVariant> ParameterVariantVec;
};
#endif
