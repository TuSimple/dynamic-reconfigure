#!/usr/bin/env python
PACKAGE = "dynamic_tutorials"

from parameter_generator_catkin import *

gen = ParameterGenerator()
'''
camera_basic_group = gen.add_group("Basic Settings")
camera_trigger_group = gen.add_group("Camera Trigger Settings")
color_adjustment_group = gen.add_group("Color Adjustment Settings")
brightness_adjustment_group = gen.add_group("Brightness Adjustment Settings")
algorithm_roi_group = gen.add_group("Auto Algorithm ROI Settings")
'''
camera_basic_group = gen
camera_trigger_group = gen
color_adjustment_group = gen
brightness_adjustment_group = gen
algorithm_roi_group = gen

# Basic Settings
#_______________________________________________________________________________________
output_pixfmt_enum = gen.enum([ gen.const("out_RGB8",    str_t, "RGB8",""),
                                gen.const("out_BGR8", str_t, "BGR8", ""),
                                gen.const("out_MONO8",       str_t, "MONO8","") ],
                              "An enum to set color encoding mode")

compressedformat_enum = gen.enum([ gen.const("JPEG",    str_t, "JPEG",""),
                           gen.const("PNG",       str_t, "PNG","")],
                     "An enum to set compressed fromat")

rotation_enum = gen.enum([ gen.const("degree_0",   int_t,0,""),
                           gen.const("degree_90", int_t,1,""),
                           gen.const("degree_counter90",  int_t,3,""),
                           gen.const("degree_180",  int_t,2,"")
                           ],
                     "An enum to set image rotation degree")

camera_basic_group.add("frame_rate", double_t, 0, "frame_rate", 20.0,5.0,120.0)
camera_basic_group.add("enable_image_raw",bool_t,0,"enalbe_image_raw",False)
camera_basic_group.add("output_pixfmt", str_t, 0, "color encoding","BGR8", edit_method=output_pixfmt_enum)
camera_basic_group.add("image_rotation", int_t,0, "set image roation(0, 90, 180,270 degrees clockwise)",0, edit_method=rotation_enum)
camera_basic_group.add("isp_enable",bool_t,0,"Controls whether the image processing core is used for optional pixel format mode (i.e. mono)",False)

camera_basic_group.add("compressedformat", str_t, 0, "Compressed Format","JPEG", edit_method=compressedformat_enum)
camera_basic_group.add("jpeg_quality",int_t,0,"JPEG quality(min: 0.3, max:1.0)", 75, 1 , 100)
camera_basic_group.add("png_level",int_t,0,"PNG compressed level (min 1, max: 9)", 6, 1,9)

# Trigger Settings
#_______________________________________________________________________________________
source_enum = gen.enum([ gen.const("Software",    str_t, "Software",""),
                         gen.const("Line0",       str_t, "Line0",""),
                         gen.const("Line1",       str_t, "Line1",""),
                         gen.const("Line2",       str_t, "Line1",""),
                         gen.const("LIne3",       str_t, "Line3","")],
                     "An enum to set source")

selector_enum = gen.enum([ gen.const("AcquisitionStart",  str_t, "AcquisitionStart",""),
                           gen.const("AcquisitionEnd",    str_t, "AcquisitionEnd",""),
                           gen.const("AcquisitionActive", str_t, "AcquisitionActive",""),
                           gen.const("FrameStart",        str_t, "FrameStart",""),
                           gen.const("FrameEnd",          str_t, "FrameEnd",""),
                           gen.const("FrameActive",       str_t, "FrameActive",""),
                           gen.const("FrameBurstStart",   str_t, "FrameBurstStart",""),
                           gen.const("FrameBurstEnd",     str_t, "FrameBurstEnd",""),
                           gen.const("FrameBurstActive",  str_t, "FrameBurstActive",""),
                           gen.const("LineStart",         str_t, "LineStart",""),
                           gen.const("ExposureStart",     str_t, "ExposureStart",""),
                           gen.const("ExposureEnd",       str_t, "ExposureEnd",""),
                           gen.const("ExposureActive",    str_t, "ExposureActive","")],
                     "An enum to set tirgger behavior")

activation_enum = gen.enum([ gen.const("RisingEdge",  str_t, "RisingEdge",""),
                             gen.const("FallingEdge", str_t, "FallingEdge",""),
                             gen.const("AnyEdge",     str_t, "AnyEdge",""),
                             gen.const("LevelHigh",   str_t, "LevelHigh",""),
                             gen.const("LevelLow",    str_t, "LevelLow","")],
                     "An enum to set tirgger activation method")


overlap_enum = gen.enum([ gen.const("Off",      str_t, "Off",""),
                          gen.const("ReadOut", str_t, "ReadOut",""),
                          gen.const("PreviousFrame",       str_t, "PreviousFrame",""),
                          gen.const("PreviousLine",       str_t, "PreviousLine","")],
                     "An enum to set tirgger overlap method")

camera_trigger_group.add("enable_trigger", bool_t, 0, "enalbe_trigger", False)
camera_trigger_group.add("enable_trigger_delay",bool_t,0,"enalbe_trigger",False)
camera_trigger_group.add("trigger_delay", double_t, 0, "trigger_delay in microseconds(us) ", 0.0,1.0,30000.0)
camera_trigger_group.add("trigger_source", str_t, 0, "trigger source","Software", edit_method=source_enum)
camera_trigger_group.add("trigger_selector", str_t, 0, "trigger source","FrameStart", edit_method=selector_enum)
camera_trigger_group.add("trigger_activation", str_t, 0, "trigger source","RisingEdge", edit_method=activation_enum)
camera_trigger_group.add("trigger_overlap", str_t, 0, "trigger source","ReadOut", edit_method=overlap_enum)


# Color Consistancy
#_______________________________________________________________________________________
lightprofile_enum = gen.enum([ gen.const("Indoor",    str_t, "Indoor",""),
                         gen.const("Outdoor",       str_t, "Outdoor","")],
                     "An enum to set light profile")

lightmode_enum = gen.enum([ gen.const("Normal",    str_t, "Normal",""),
                           gen.const("Backlight",       str_t, "Backlight",""),
                           gen.const("Frontlight",       str_t, "Frontlight","")],
                     "An enum to set auto exposure lighting mode setting")

color_adjustment_group.add("auto_white_balance",bool_t,0," ",True);
color_adjustment_group.add("white_balance_blue",double_t,0,"White balance in blue.(blue-green ratio , max:4.0)", 0.5, 0.25,4.0)
color_adjustment_group.add("white_balance_red", double_t,0,"White balance in red.(red-green ratio, max 4.0)", 0.5,0.25,4.0)

color_adjustment_group.add("awb_damping", double_t, 0, "AutoWhiteBalance_damping", 0.25,0.0, 0.99)
color_adjustment_group.add("awb_lower_limit", double_t, 0, "AutoWhiteBalance_upper_limit", 0.25, 0.25, 4.0)
color_adjustment_group.add("awb_upper_limit", double_t, 0, "AutoWhiteBalance_lower_limit", 4.0,  0.26, 4.0)
color_adjustment_group.add("awb_lightprofile", str_t, 0, "light profile","Indoor", edit_method=lightprofile_enum)


# Brightness Adjustment
#_______________________________________________________________________________________
priority_enum = gen.enum([ gen.const("Gain",          str_t, "Gain",""),
                           gen.const("ExposureTime",  str_t, "ExposureTime","")],
                           "An enum to set auto exposure control priority setting")

brightness_adjustment_group.add("auto_gain", bool_t, 0, "set auto gain", True);
brightness_adjustment_group.add("auto_exposure", bool_t, 0, "set auto exposure",True)

brightness_adjustment_group.add("gain",double_t,0, "Gain (in dB) applied to the images in the sequence.", 35.0, 0.0, 40.0)
brightness_adjustment_group.add("exposure_time", double_t, 0,"Time duration in microsecond(us), the shutter was open.",15.0,6.0,25000.0)

brightness_adjustment_group.add("ae_lightmode", str_t, 0, "Auto exposure light mode ","Normal", edit_method=lightmode_enum)
brightness_adjustment_group.add("ae_priority", str_t, 0, "Auto exposure control priority ","ExposureTime", edit_method=priority_enum)

brightness_adjustment_group.add("ae_time_lower_limit",    double_t,    0, "The smallest exposure time in microsecond(us) that auto exposure can set", 6,  6, 25000)
brightness_adjustment_group.add("ae_time_upper_limit",    double_t,    0, "The largest exposure time in microsecond(us) that auto exposure can set", 10000,  6, 25000)
brightness_adjustment_group.add("ae_gain_lower_limit",    double_t,    0, "The smallest gain that auto exposure can set", 0.0,  0.0, 42.0)
brightness_adjustment_group.add("ae_gain_upper_limit",    double_t,    0, "The largest gain that auto exposure can set", 32.0,  0.0, 42.0)

brightness_adjustment_group.add("auto_grey_value_enable", bool_t, 0, "enable auto grey value adjustment", True);
brightness_adjustment_group.add("grey_value_fixed",    double_t,    0, "The fixed target gray value", 40.0,  5.0, 95.0)
brightness_adjustment_group.add("auto_grey_value_lower_limit",    double_t,    0, "The smallest grayval that auto exposure can set",10.0,  5.0, 95.0)
brightness_adjustment_group.add("auto_grey_value_upper_limit",    double_t,    0, "The largest grayval that auto exposure can set", 50.0,  5.0, 95.0)

brightness_adjustment_group.add("gamma_enable",bool_t,0,"Enables/disables gamma correction",False)

# ROI Settings
#_______________________________________________________________________________________
algorithm_roi_group.add("aas_roi_enable", bool_t, 0, "Enable auto algorithm roi",False)
algorithm_roi_group.add("show_autoalgorithm_range", bool_t, 0, "visulization the range of the auto algorithm(red:whitebalance, blue: exposure)", False)

algorithm_roi_group.add("awb_offsetx",    int_t,    0, "AutoWhiteBalance_roi_offsetx", 100, 0, 1024)
algorithm_roi_group.add("awb_offsety",    int_t,    0, "AutoWhiteBalance_roi_offsety", 200, 0, 576)
algorithm_roi_group.add("awb_width",    int_t,    0, "AutoWhiteBalance_roi_offsetx", 824, 0, 1024)
algorithm_roi_group.add("awb_height",    int_t,    0, "AutoWhiteBalance_roi_offsety", 330, 0, 576)

algorithm_roi_group.add("ae_offsetx",    int_t,    0, "AutoExposure_roi_offsetx", 100, 0, 1024)
algorithm_roi_group.add("ae_offsety",    int_t,    0, "AutoExposure_roi_offsety", 200, 0, 576)
algorithm_roi_group.add("ae_width",    int_t,    0, "AutoExposure_roi_offsetx", 824, 0, 1024)
algorithm_roi_group.add("ae_height",    int_t,    0, "AutoExposure_roi_offsety", 330, 0, 576)



exit(gen.generate(PACKAGE, "dynamic_tutorials", "Test"))
